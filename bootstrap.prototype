#!/usr/bin/env bash

# CONFIGURATION (see config.sh)
#-----------------------------------------------------------

SITE="$site"
GITHUB_OAUTH_TOKEN="$github_token"
BITBUCKET_LOGIN="$bitbucket_login"
BITBUCKET_PASSWORD="$bitbucket_password"

SITE_DB="${SITE}_db"
SITE_DB_USER_NAME="${SITE}_usr"
SITE_DB_USER_PASSWORD=$(cat /dev/urandom | tr -dc "a-zA-Z0-9_+" | fold -w 16 | head -n 1)
MYSQL_ROOT_PASSWORD=$(cat /dev/urandom | tr -dc "a-zA-Z0-9_+" | fold -w 16 | head -n 1)

# -----------------------------------------------------------
#  /END OF CONFIGURATION


apt-get install -y vim


# From Chris Fidao's script to install Apache and PHP.
# See: https://gist.github.com/fideloper/7074502
# =============================================================

# Update
sudo apt-get update

# Install MySQL without prompt
sudo debconf-set-selections <<< "mysql-server mysql-server/root_password password $MYSQL_ROOT_PASSWORD"
sudo debconf-set-selections <<< "mysql-server mysql-server/root_password_again password $MYSQL_ROOT_PASSWORD"

echo ">>> Installing Base Items"

# Install base items
sudo apt-get install -y vim tmux curl wget build-essential python-software-properties

echo ">>> Adding PPA's and Installing Server Items"

# Add repo for latest PHP
sudo add-apt-repository -y ppa:ondrej/php5

# Update Again
sudo apt-get update

# Install the Rest
sudo apt-get install -y git-core php5 apache2 libapache2-mod-php5 php5-mysql php5-curl php5-gd php5-mcrypt php5-xdebug mysql-server

# =============================================================

# Stop apache
service apache2 stop

# Add ServerName to httpd.conf
echo "ServerName localhost" | sudo tee /etc/apache2/conf-available/servername.conf
sudo a2enconf servername

# Setup hosts file
VHOST=$(cat <<EOF

<VirtualHost *:80>
    ServerAdmin webmaster@localhost
    DocumentRoot "/var/www/$SITE/public"
    ServerName localhost
    ErrorLog "/var/log/apache2/${SITE}-error_log.log"
    CustomLog "/var/log/apache2/${SITE}-access_log.log" common
    <Directory "/var/www/${SITE}/public">
        Options -Indexes +FollowSymLinks +MultiViews
        Require all granted
        AllowOverride All
    </Directory>
</VirtualHost>

EOF
)

echo "${VHOST}" > /etc/apache2/sites-available/${SITE}.conf

# create simlink
ln -s /etc/apache2/sites-available/${SITE}.conf /etc/apache2/sites-enabled/${SITE}.conf

# Enable mod_rewrite
a2enmod rewrite

# Remove default sites_enabled
rm /etc/apache2/sites-enabled/000-default.conf

# Remove /var/www default
# rm -rf /var/www

# create the document root folder
mkdir -p /var/www/$SITE/public

# Symlink /vagrant to /var/www
ln -fs /vagrant /var/www

# Restart apache
service apache2 restart



# Install Composer
# -------------------------------------------------------------------
sudo curl -s https://getcomposer.org/installer | php
sudo mv composer.phar /usr/local/bin/composer
sudo echo "export PATH=$PATH:/usr/local/bin" >> ~/.profile
export PATH=$PATH:/usr/local/bin

# Tell composer about our GitHub oauth token
composer config -g github-oauth.github.com ${GITHUB_OAUTH_TOKEN}

# Set PHP timezone
sudo sed -i "s/\;date\.timezone =/date\.timezone = \"America\/Los_Angeles\"/" /etc/php5/apache2/php.ini

echo ">>> Securing MySQL"

# Take the same steps that mysql_secure_installation would normally do
sudo service mysql restart
# sudo mysqladmin -u root password "$MYSQL_ROOT_PASSWORD"
mysql -u root -p"$MYSQL_ROOT_PASSWORD" -e "UPDATE mysql.user SET Password=PASSWORD('$MYSQL_ROOT_PASSWORD') WHERE User='root'"
mysql -u root -p"$MYSQL_ROOT_PASSWORD" -e "DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1')"
mysql -u root -p"$MYSQL_ROOT_PASSWORD" -e "DELETE FROM mysql.user WHERE User=''"
mysql -u root -p"$MYSQL_ROOT_PASSWORD" -e "DELETE FROM mysql.db WHERE Db='test' OR Db='test\_%'"

echo ">>> Creating database"

# Set up the database
mysql -u root -p"$MYSQL_ROOT_PASSWORD" -e "CREATE DATABASE IF NOT EXISTS ${SITE_DB}"
mysql -u root -p"$MYSQL_ROOT_PASSWORD" -e "CREATE USER '${SITE_DB_USER_NAME}'@'localhost' IDENTIFIED BY '${SITE_DB_USER_PASSWORD}'"
mysql -u root -p"$MYSQL_ROOT_PASSWORD" -e "GRANT ALL PRIVILEGES ON ${SITE_DB}.* TO '${SITE_DB_USER_NAME}'@'%' IDENTIFIED BY '${SITE_DB_USER_PASSWORD}' WITH GRANT OPTION"
mysql -u root -p"$MYSQL_ROOT_PASSWORD" -e "FLUSH PRIVILEGES"

# Update the bind-address so that we can connect using Heidi
sudo sed -i "s/bind-address.*/bind-address = $bind_address/" /etc/mysql/my.cnf

# Restart MySQL
sudo service mysql restart


# Install October
# -------------------------------------------------------------------
echo "Installing OctoberCMS.  This might take a while..."
composer create-project october/october /var/www/${SITE}/public dev-master --no-interaction --quiet


# Configure October (Laravel) database settings
# credit to: https://github.com/natanshalva/Laravel-install/blob/master/install_laravel4.sh
# -------------------------------------------------------------------

mv /var/www/${SITE}/public/config/database.php /var/www/${SITE}/public/config/database.php.orig

sed "s/'database'  => 'database'/'database'  => '${SITE_DB}'/g  
     s/'username'  => 'root'/'username'  => '${SITE_DB_USER_NAME}'/g  
     s/'password'  => ''/'password'  => '${SITE_DB_USER_PASSWORD}'/g"  /var/www/${SITE}/public/config/database.php.orig > /var/www/${SITE}/public/config/database.php

php /var/www/${SITE}/public/artisan october:up

# Set the storage folder's permissions
chmod -R ugo+wrx /var/www/${SITE}/public/storage

cd /var/www/${SITE}/public

# Install node.js and grunt
# -------------------------------------------------------------------
curl -sL https://deb.nodesource.com/setup | sudo bash -
sudo apt-get install -y nodejs
sudo npm install grunt-cli --no-bin-links
sudo npm install -g grunt-cli
sudo npm install grunt --no-bin-links
sudo npm install grunt-contrib-less --no-bin-links
sudo npm install grunt-contrib-watch --no-bin-links

GRUNTFILE=$(cat <<EOF

module.exports = function (grunt) {
  grunt.initConfig({
    less: {
      development: {
         options: {
           compress: true,
           yuicompress: true,
           optimization: 2,
           sourceMap: true,
           sourceMapFilename: 'themes/${SITE}/assets/css/theme.css.map', // where file is generated and located
           sourceMapURL: '/themes/${SITE}/assets/css/styles.css.map', // the complete url and filename put in the compiled css file
           sourceMapBasepath: 'public', // Sets sourcemap base path, defaults to current working directory.
           sourceMapRootpath: '/', // adds this path onto the sourcemap filename and less file paths
         },
         files: {
           // target.css file: source.less file
           "themes/${SITE}/assets/css/theme.css": "themes/${SITE}/assets/less/theme.less"
         }
       }
     },
     watch: {
       styles: {
         files: ['themes/${SITE}/assets/less/**/*.less'], // which files to watch
         tasks: ['less'],
         options: {
           nospawn: true
         }
       }
     }
   });

   grunt.loadNpmTasks('grunt-contrib-less');
   grunt.loadNpmTasks('grunt-contrib-watch');

   grunt.registerTask('default', ['watch']);
};

EOF
)

echo "${GRUNTFILE}" > /var/www/${SITE}/public/Gruntfile.js

# Add grunt to the path
BASH_PROFILE=$(cat <<EOF
  PATH=$PATH:~/usr/local/share/npm/bin
EOF
)

echo "$BASH_PROFILE" > ~/.bash_profile


# Install the "blank" theme
# -------------------------------------------------------------------

cd /var/www/${SITE}/public
/usr/bin/php artisan theme:install krisawzm.blank ${SITE} -n
/usr/bin/php artisan theme:use ${SITE} --no-interaction --force

# Copy over the less and vendor files from the demo theme
# -------------------------------------------------------------------

cp -R /var/www/${SITE}/public/themes/demo/assets/less /var/www/${SITE}/public/themes/${SITE}/assets
cp -R /var/www/${SITE}/public/themes/demo/assets/vendor /var/www/${SITE}/public/themes/${SITE}/assets

#
# TODO: create a new theme that has a layout and the basic bootstrap scaffolding prepared

echo ""
echo ""
echo ""
echo "Done."
echo ""
echo "=================================================="
echo "  ${SITE} configuration                           "
echo "=================================================="
echo "SITE: ${SITE}                                     "
echo "IP Address: $bind_address                         "
echo "MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}       "
echo "SITE_DB: ${SITE_DB}                               "
echo "SITE_DB_USER_NAME: ${SITE_DB_USER_NAME}           "
echo "SITE_DB_USER_PASSWORD: ${SITE_DB_USER_PASSWORD}   "
echo "=================================================="
echo ""
echo ""
echo "Run grunt to monitor and compile less files."
echo ""
echo "To create a repository, use: "
echo "curl --user ${BITBUCKET_LOGIN}:${BITBUCKET_PASSWORD} https://api.bitbucket.org/1.0/repositories/ --data name=${SITE}"





